<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
    
<mapper namespace="com.itwillbs.with_me.mapper.StoreMapper">
	<!-- 전체 게시물 수 조회(검색 기능 추가) -->
	<!-- 검색어에 따른 결과 게시물 수 조회 -> 페이징 때문 -->
	<select id="selectBoardListCount" resultType="int">
		SELECT count(*)
		FROM product_info
		WHERE 
		<choose>
			<when test="!searchKeyword.equals('')">
				product_category like concat('%',#{searchKeyword},'%') 	
				or product_category_detail like concat('%',#{searchKeyword},'%') 	
				or product_name like concat('%',#{searchKeyword},'%') 	
				or product_description like concat('%',#{searchKeyword},'%') 	
				or product_category_detail like concat('%',#{searchKeyword},'%') 
			</when>
			<otherwise>
				<choose>
					<when test="productCategory_detail == null">
						product_category = #{productCategory}
						AND	product_status = '1'
					</when>
					<otherwise>
						product_category = #{productCategory}
						AND product_category_detail = #{productCategory_detail}
						AND	product_status = '1'
					</otherwise>
				</choose>
			</otherwise>
		</choose>
	</select>
	
	<!-- 상품 목록 표출 -->
	<select id="selectStoreList" resultType="hashmap">
		SELECT p.*
		<if test="id">
			,l.*
		</if>
			FROM product_info p 
		<if test="id">
			LEFT JOIN like_ l
			ON p.product_code = l.like_product_code AND l.like_mem_email = #{id}
		</if>
		WHERE
		<choose>
			<when test="!searchKeyword.equals('')">
				product_category like concat('%',#{searchKeyword},'%')
				or product_category_detail like concat('%',#{searchKeyword},'%')
				or product_name like concat('%',#{searchKeyword},'%') 	
				or product_description like concat('%',#{searchKeyword},'%') 	
				 
			</when>
			<otherwise>
				<choose>
					<when test="productCategory_detail == null">
						product_category = #{productCategory}
						AND product_status = '1'
					</when>
					<otherwise>
						product_category = #{productCategory}
						AND product_category_detail = #{productCategory_detail}
						AND product_status = '1'
					</otherwise>
				</choose>
			</otherwise>
		</choose>
		limit
			#{startRow}
			, #{listLimit}
	</select>
	
	<select id="selectStoreListAll" resultType="hashmap">
		SELECT *
		FROM product_info
		WHERE product_category = '푸드'
	
	
	</select>
	
	
	
	
	
	
	
	<!-- 상품 상세정보 가져오기 -->
	<select id="selectProduct" resultType="hashmap">
		SELECT *
		
		FROM product_info
		WHERE product_code = #{product_code}
		
	</select>
	
	<!-- 상품별 옵션 리스트 -->
	<select id="selectProductOptionList" resultType="hashmap">
		SELECT *, SUBSTRING_INDEX(SUBSTRING_INDEX(product_item_option, "|", numbers.n), "|", -1) AS splited_product_option
		FROM (
			SELECT 1 AS n UNION ALL
			SELECT 2 UNION ALL
			SELECT 3 UNION ALL
			SELECT 4 UNION ALL
			SELECT 5) AS numbers
		INNER JOIN product_info
		ON CHAR_LENGTH(product_item_option) - CHAR_LENGTH(REPLACE(product_item_option, "|", "")) >= numbers.n - 1
		WHERE product_idx = #{product_idx}
	</select>
	
	<!-- 스토어 사용자 주문 등록 -->
	<insert id="insertUserOrder">
		INSERT INTO store_user
		VALUES (
			null
			, #{
		)
	
	</insert>
	
	<!-- 스토어 결제 정보 db저장 -->
	<insert id="insertStorePaymentInfo">
	
	
	</insert>
	
	
<!-- ============================================================ -->	
	<!-- 좋아요 했는지 판단 후 가져가기 -->
	<select id="selectIsLike" resultType="like">
		SELECT *
		FROM like_
		WHERE
			like_mem_email = #{like_mem_email}
			AND like_product_code = #{like_product_code}
			AND like_status = 'Y'
		
	</select>
	
		<!-- 좋아요 한 적 있는지 확인부터 -->
	<select id="selectLikeCount" resultType="int">
		SELECT COUNT(*)
		FROM like_
		WHERE 
			like_product_code = #{like_product_code}
			AND like_mem_email = #{like_mem_email}
	</select>
	
	<!--  좋아요 기록 있는데 N 이니까 Y로 status 변경 -->
	<update id="updateLike">
		UPDATE like_
		SET like_status = 'Y'
		WHERE 
			like_product_code = #{like_product_code}
			AND like_mem_email = #{like_mem_email}
			AND like_status = 'N'
	</update>
	
	<!-- 좋아요 등록 -->
	<insert id="insertLike">
		INSERT INTO like_
		VALUES (
			null
			, #{like_mem_email}
			, null
			, #{like_product_code}
			, 'Y'
		)
	</insert>
	
	<!--  좋아요 취소 -->
	<update id="cancleLike">
		UPDATE like_
		SET like_status = 'N'
		WHERE 
			like_product_code = #{like_product_code}
			AND like_mem_email = #{like_mem_email}
			AND like_status = 'Y'
	</update>
	
<!-- ===================================================== -->
	
	
	
	<!-- 사용자 배송지 가져오기 -->
	<select id="selectUserAddress" resultType="address">
		SELECT *
		FROM user_address
		WHERE address_mem_email = #{mem_email}
		ORDER BY address_is_default DESC 
				, address_receiver_name
	</select>

	<!-- 기본 배송지 여부 확인 -->
	<select id="selectAddressIsDefault" resultType="int">
		SELECT COUNT(*)
		FROM user_address u JOIN member m
		ON u.address_mem_email = m.mem_email
		WHERE 
			address_mem_email = #{id}
			AND address_is_default = 'Y'
			AND m.mem_status = 1;
			
	</select>
	
	<!-- 기본 배송지 변경 (원래 기본 배송지였던거를 N으로) -->
	<update id="updateDefaultAddressToN">
		UPDATE user_address
		SET address_is_default = 'N'
		WHERE 
			address_mem_email = #{id}
			AND address_is_default = 'Y';
	</update>
	
	<!-- 기본 배송지 변경 -->
	<update id="updateDefaultAddressToY">
		UPDATE user_address
		SET address_is_default = 'Y'
		WHERE 
			address_idx = #{address_idx}
			ANd address_is_default = 'N'
	</update>
	
	<!-- 배송지 등록 -->
	<insert id="insertNewAddress">
		INSERT INTO user_address 
		VALUES (
			null
			,#{address_mem_email}
			,#{address_receiver_name}
			,#{address_post_code}
			,#{address_main}
			,#{address_sub}
			,#{address_receiver_tel}
			<choose>
				<when test="address_is_default.equals('off')">
				,'N'
				</when>
				<otherwise>
				, 'Y'
				</otherwise>
			</choose>
			, default		
		)
	</insert>
	
	<!-- 배송지 삭제 -->
	<delete id="deleteAddress">
		DELETE FROM user_address
		WHERE address_idx = #{address_idx}
	</delete>
	
	<!-- 선택된 배송지 삭제하는 경우, 새로 selected 배송지 해줘야함 -->
	<update id="updateSelectedAddressToY2" parameterType="address">
		UPDATE user_address ua
		JOIN (
			SELECT MAX(address_idx) as max_address_idx
			FROM user_address
			WHERE address_mem_email = #{id}
		) AS subquery
		ON ua.address_idx = subquery.max_address_idx
		SET ua.address_selected = 'Y'
	</update>
	<!-- 선택 배송지 여부 확인 -->
	<select id="selectAddressIsSelected" resultType="int">
		SELECT COUNT(*)
		FROM user_address u JOIN member m
		ON u.address_mem_email = m.mem_email
		WHERE 
			address_mem_email = #{id}
			AND address_selected = 'Y'
			AND m.mem_status = 1
	</select>
	
	<!-- 원래 선택배송지였던 걸 N으로 변경 -->
	<update id="updateSelectedAddressToN">
		UPDATE user_address
		SET address_selected = 'N'
		WHERE address_mem_email = #{id}
		AND address_selected = 'Y';
	</update>
	
	<!-- 선택 배송지로 변경 -->
	<update id="updateSelectedAddressToY">
		UPDATE user_address
		SET address_selected = 'Y'
		WHERE address_idx = #{address_idx}
	</update>

	<!-- 신고 접수 -->
	<insert id="insertReport">
		INSERT INTO report
		VALUES (
			null
			, #{report_mem_email}
			, null
			, #{report_product_code}
			, #{report_category}
			, #{report_reason}
			, #{report_file1}
			, #{report_file2}
			, #{report_file3}
			, #{report_ref_url1}
			, #{report_ref_url2}
			, #{report_ref_url3}
			, now()
			, '접수완료'
		)
	</insert>





</mapper>