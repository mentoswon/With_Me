<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
    
<mapper namespace="com.itwillbs.with_me.mapper.UserFundingMapper">

	<!-- 전체 게시물 수 조회(검색 기능 추가) -->
	<!-- 검색어에 따른 결과 게시물 수 조회 -> 페이징 때문 -->
	<select id="selectBoardListCount" resultType="int">
		SELECT count(*)
		FROM project_info
		WHERE 
		<choose>
			<when test="!searchKeyword.equals('')">
				project_category like concat('%',#{searchKeyword},'%') 	
				or project_category_detail like concat('%',#{searchKeyword},'%') 	
				or project_title like concat('%',#{searchKeyword},'%') 	
				or project_summary like concat('%',#{searchKeyword},'%') 	
				or project_category_detail like concat('%',#{searchKeyword},'%') 	
			</when>
			<otherwise>
				<choose>
					<when test="category_detail == null">
						project_category = #{category}
						AND	project_status = '승인'
					</when>
					<otherwise>
						project_category = #{category}
						AND project_category_detail = #{category_detail}
						AND	project_status = '승인'
					</otherwise>
				</choose>
			</otherwise>
		</choose>
	</select>

	<!-- 프로젝트 목록 표출 -->
	<select id="selectProjectList" resultType="hashmap">
		SELECT * 
			, (SELECT IFNULL(SUM(funding_pay_amt),0) 
				FROM funding_user 
				WHERE funding_project_idx = p.project_idx) AS funding_amt
		FROM project_info p 
		JOIN creator_info c
		ON p.creator_idx = c.creator_idx 
		WHERE 
		<choose>
			<when test="!searchKeyword.equals('')">
				p.project_category like concat('%',#{searchKeyword},'%') 	
				or p.project_category_detail like concat('%',#{searchKeyword},'%') 	
				or p.project_title like concat('%',#{searchKeyword},'%') 	
				or p.project_summary like concat('%',#{searchKeyword},'%') 	
				or p.project_category_detail like concat('%',#{searchKeyword},'%') 	
			</when>
			<otherwise>
				<choose>
					<when test="category_detail == null">
						p.project_category = #{category}
						AND	p.project_status = '승인'
					</when>
					<otherwise>
						p.project_category = #{category}
						AND p.project_category_detail = #{category_detail}
						AND	p.project_status = '승인'
					</otherwise>
				</choose>
			</otherwise>
		</choose>
		limit 
			#{startRow}             -- Mapper 내의 메서드에서 @Param("startRow")
			, #{listLimit}			-- Mapper 내의 메서드에서 @Param("listLimit")
	</select>
	
	<!-- 프로젝트 상세정보 가져오기 -->
	<select id="selectProject" resultType="hashmap">
		SELECT * 
				, (SELECT IFNULL(SUM(funding_pay_amt),0)  
				FROM funding_user 
				WHERE funding_project_idx = p.project_idx) AS funding_amt
				, (SELECT COUNT(funding_idx) 
				FROM funding_user 
				WHERE funding_project_idx = p.project_idx) AS funding_people
		FROM project_info p 
		JOIN creator_info c
		ON p.creator_idx = c.creator_idx 
		JOIN member m
		ON c.creator_email = m.mem_email
		WHERE project_code = #{project_code}
	</select>
	
	<!-- 팔로워 수 계산 -->
	<select id="countFollower" resultType="int">
		SELECT IfNULL(COUNT(*),0)
		FROM follow
		WHERE 
			follow_creator = #{creator_email}
			AND follow_status = 'Y'
	</select>
	
	
	<!-- 팔로워 리스트 -->
	<select id="selectFollowerList" resultType="follow">
		SELECT * 
		FROM follow
		WHERE follow_creator = #{creator_email}
	</select>
	
	<!-- 후원 리워드 리스트 -->
	<select id="selectRewardList" resultType="reward">
		SELECT *
		FROM reward_info r JOIN item_info i
		ON r.reward_item_idx = i.item_idx  
		WHERE r.project_idx = #{project_idx}
	</select>
	
	<!-- 리워드 별 아이템 -->
	<select id="selectRewardItemList" resultType="hashmap">
		SELECT 
			r.project_idx
			, r.reward_idx
			, r.reward_title
			, r.reward_item_idx
			, SUBSTRING_INDEX(SUBSTRING_INDEX(reward_item_idx, "|", numbers.n), "|" , -1) AS splited_item_idx
			, (SELECT item_name FROM item_info WHERE item_idx = splited_item_idx) AS item_name
			, (SELECT item_condition FROM item_info WHERE item_idx = splited_item_idx) AS item_condition
		FROM (
			SELECT 1 AS n UNION ALL 
			SELECT 2 UNION ALL
			SELECT 3 UNION ALL
			SELECT 4 UNION ALL
			SELECT 5) AS numbers
	   	INNER JOIN reward_info r
		ON CHAR_LENGTH(reward_item_idx) - CHAR_LENGTH(REPLACE(reward_item_idx, "|", "")) >= numbers.n - 1
		WHERE r.reward_idx = #{reward_idx}
		ORDER BY reward_item_idx;
	</select>
	
	<!-- 아이템 옵션 -->
	<select id="selectItemOptionList" resultType="hashmap">
		SELECT *, SUBSTRING_INDEX(SUBSTRING_INDEX(multiple_option, "|", numbers.n), "|" , -1) AS splited_item_option
		from (
			SELECT 1 AS n UNION ALL 
			SELECT 2 UNION ALL
			SELECT 3 UNION ALL
			SELECT 4 UNION ALL
			SELECT 5) AS numbers
	    INNER JOIN item_info
	    ON CHAR_LENGTH(multiple_option) - CHAR_LENGTH(REPLACE(multiple_option, "|", "")) >= numbers.n - 1
		WHERE item_idx = #{item_idx}
	</select>
	
	<!-- 사용자 배송지 가져오기 -->
	<select id="selectUserAddress" resultType="address">
		SELECT *
		FROM user_address
		WHERE address_mem_email = #{mem_email}
		ORDER BY address_is_default DESC 
				, address_receiver_name
	</select>
	
	<!-- 기본 배송지 여부 확인 -->
	<select id="selectAddressIsDefault" resultType="int">
		SELECT COUNT(*)
		FROM user_address
		WHERE address_mem_email = #{id}
		AND address_is_default = 'Y';
	</select>
	
	<!-- 기본 배송지 변경 (원래 기본 배송지였던거를 N으로) -->
	<update id="updateDefaultAddress">
		UPDATE user_address
		SET address_is_default = 'N'
		WHERE address_mem_email = #{id}
		AND address_is_default = 'Y';
	</update>
	
	
	<!-- 배송지 등록 -->
	<insert id="insertNewAddress">
		INSERT INTO user_address 
		VALUES (
			null
			,#{address_mem_email}
			,#{address_receiver_name}
			,#{address_post_code}
			,#{address_main}
			,#{address_sub}
			,#{address_receiver_tel}
			<choose>
				<when test="#{address_is_default == 'on'}">
				,'Y'
				</when>
				<otherwise>
				, 'N'
				</otherwise>
			</choose>
			, default		
		)
	</insert>
	
	<!-- 배송지 삭제 -->
	<delete id="deleteAddress">
		DELETE FROM user_address
		WHERE address_idx = #{address_idx}
	</delete>
	
	
	<!-- 선택 배송지 여부 확인 -->
	<select id="selectAddressIsSelected" resultType="int">
		SELECT COUNT(*)
		FROM user_address
		WHERE address_mem_email = #{id}
		AND address_selected = 'Y';
	</select>
	
	<!-- 원래 선택배송지였던 걸 N으로 변경 -->
	<update id="updateSelectedAddressToN">
		UPDATE user_address
		SET address_selected = 'N'
		WHERE address_mem_email = #{id}
		AND address_selected = 'Y';
	</update>
	
	<!-- 선택 배송지로 변경 -->
	<update id="updateSelectedAddressToY">
		UPDATE user_address
		SET address_selected = 'Y'
		WHERE address_idx = #{address_idx}
	</update>
	
	<!-- 신고 접수 -->
	<insert id="insertReport">
		INSERT INTO report
		VALUES (
			null
			, #{report_mem_email}
			, #{report_project_code}
			, null
			, #{report_category}
			, #{report_reason}
			, #{report_file1}
			, #{report_file2}
			, #{report_file3}
			, #{report_ref_url1}
			, #{report_ref_url2}
			, #{report_ref_url3}
		)
	</insert>
	
	<!-- 팔로우 등록 -->
	<insert id="insertFollow">
		INSERT INTO follow
		VALUES (
			null
			, #{id}
			, #{follow_creator}
			, 'Y'
		)
	</insert>
	
	<!--  언팔로우 - status 변경 -->
	<update id="unFollow">
		UPDATE follow
		SET follow_status = 'N'
		WHERE 
			follow_mem_email = #{follow_mem_email}
			AND follow_creator = #{follow_creator}
			AND follow_status = 'Y'
	</update>
	
	
	<!-- 좋아요 등록 -->
	<insert id="insertLike">
		INSERT INTO like_
		VALUES (
			null
			, #{like_mem_email}
			, #{like_project_code}
			, null
		)
	</insert>
</mapper>