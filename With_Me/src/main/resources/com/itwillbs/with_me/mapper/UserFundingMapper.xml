<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
    
<mapper namespace="com.itwillbs.with_me.mapper.UserFundingMapper">

	<!-- 전체 게시물 수 조회(검색 기능 추가) -->
	<!-- 검색어에 따른 결과 게시물 수 조회 -> 페이징 때문 -->
	<select id="selectBoardListCount" resultType="int">
		SELECT count(*)
		FROM project_info
		WHERE 
		<choose>
			<when test="!searchKeyword.equals('')">
				project_category like concat('%',#{searchKeyword},'%') 	
				or project_category_detail like concat('%',#{searchKeyword},'%') 	
				or project_title like concat('%',#{searchKeyword},'%') 	
				or project_summary like concat('%',#{searchKeyword},'%') 	
				or project_category_detail like concat('%',#{searchKeyword},'%') 	
			</when>
			<otherwise>
				<choose>
					<when test="category_detail == null">
						project_category = #{category}
						AND	project_status = '승인'
						AND
							<choose>
								<when test="project_state == '진행중'">
									<![CDATA[ funding_start_date < now() AND funding_end_date > now() ]]>
								</when>
								<when test="project_state == '오픈예정'">
									<![CDATA[ funding_start_date > now() ]]>
								</when>
								<when test="project_state == '마감'">
									<![CDATA[ funding_end_date < now() ]]>
								</when>
								<otherwise>
									1 = 1
								</otherwise>
							</choose>
					</when>
					<otherwise>
						project_category = #{category}
						AND project_category_detail = #{category_detail}
						AND	project_status = '승인'
						AND
							<choose>
								<when test="project_state == '진행중'">
									<![CDATA[ funding_start_date < now() AND funding_end_date > now() ]]>
								</when>
								<when test="project_state == '오픈예정'">
									<![CDATA[ funding_start_date > now() ]]>
								</when>
								<when test="project_state == '마감'">
									<![CDATA[ funding_end_date < now() ]]>
								</when>
								<otherwise>
									1 = 1
								</otherwise>
							</choose>
					</otherwise>
				</choose>
			</otherwise>
		</choose>
	</select>

	<!-- 프로젝트 목록 표출 -->
	<select id="selectProjectList" resultType="hashmap">
		SELECT p.*, c.*, 
		<if test="id">
			l.like_mem_email, l.like_status,
		</if>
		(SELECT IFNULL(SUM(funding_pay_amt),0) FROM funding_user WHERE funding_project_idx = p.project_idx) AS funding_amt
		FROM project_info p JOIN creator_info c
		ON p.creator_idx = c.creator_idx
		
		<if test="id">
			LEFT JOIN like_ l
			ON p.project_code = l.like_project_code AND l.like_mem_email = #{id}
		</if> 
		WHERE 
		<choose>
			<when test="!searchKeyword.equals('')">
				p.project_category like concat('%',#{searchKeyword},'%') 	
				or p.project_category_detail like concat('%',#{searchKeyword},'%') 	
				or p.project_title like concat('%',#{searchKeyword},'%') 	
				or p.project_summary like concat('%',#{searchKeyword},'%') 	
				or p.project_category_detail like concat('%',#{searchKeyword},'%') 	
			</when>
			<otherwise>
				<choose>
					<when test="category_detail == null">
						p.project_category = #{category}
						AND	p.project_status = '승인'
						AND
							<choose>
								<when test="project_state == '진행중'">
									<![CDATA[ funding_start_date < now() AND funding_end_date > now() ]]>
								</when>
								<when test="project_state == '오픈예정'">
									<![CDATA[ funding_start_date > now() ]]>
								</when>
								<when test="project_state == '마감'">
									<![CDATA[ funding_end_date < now() ]]>
								</when>
								<otherwise>
									1 = 1
								</otherwise>
							</choose>
					</when>
					<otherwise>
						p.project_category = #{category}
						AND p.project_category_detail = #{category_detail}
						AND	p.project_status = '승인'
						AND
							<choose>
								<when test="project_state == '진행중'">
									<![CDATA[ funding_start_date < now() AND funding_end_date > now() ]]>
								</when>
								<when test="project_state == '오픈예정'">
									<![CDATA[ funding_start_date > now() ]]>
								</when>
								<when test="project_state == '마감'">
									<![CDATA[ funding_end_date < now() ]]>
								</when>
								<otherwise>
									1 = 1
								</otherwise>
							</choose>
					</otherwise>
				</choose>
			</otherwise>
		</choose>
		limit 
			#{startRow}             -- Mapper 내의 메서드에서 @Param("startRow")
			, #{listLimit}			-- Mapper 내의 메서드에서 @Param("listLimit")
	</select>
	
	<!-- 프로젝트 상세정보 가져오기 -->
	<select id="selectProject" resultType="hashmap">
		SELECT * 
				, (SELECT IFNULL(SUM(funding_pay_amt),0)  
				FROM funding_user 
				WHERE funding_project_idx = p.project_idx) AS funding_amt
				, (SELECT COUNT(funding_idx) 
				FROM funding_user 
				WHERE funding_project_idx = p.project_idx) AS funding_people
		FROM project_info p 
		JOIN creator_info c
		ON p.creator_idx = c.creator_idx 
		JOIN member m
		ON c.creator_email = m.mem_email
		WHERE project_code = #{project_code}
	</select>
	
	<!-- 팔로워 수 계산 -->
	<select id="countFollower" resultType="int">
		SELECT IfNULL(COUNT(*),0)
		FROM follow
		WHERE 
			follow_creator = #{creator_email}
			AND follow_status = 'Y'
	</select>
	
	
	<!-- 팔로워 리스트 -->
	<select id="selectFollowerList" resultType="follow">
		SELECT * 
		FROM follow
		WHERE follow_creator = #{creator_email}
	</select>
	
	<!-- 좋아요 한 건지 판단 후 가져가기 -->
	<select id="selectIsLike" resultType="like">
		SELECT *
		FROM like_
		WHERE 
			like_mem_email = #{like_mem_email}
			AND like_project_code = #{like_project_code}
			AND like_status = 'Y'
	</select>
	
	
	<!-- 후원 리워드 리스트 -->
	<select id="selectRewardList" resultType="reward">
		SELECT *
		FROM reward_info r JOIN item_info i
		ON r.reward_item_idx = i.item_idx  
		WHERE r.project_idx = #{project_idx}
	</select>
	
	<!-- 리워드 별 아이템 -->
	<select id="selectRewardItemList" resultType="hashmap">
		SELECT 
			r.project_idx
			, r.reward_idx
			, r.reward_title
			, r.reward_item_idx
			, SUBSTRING_INDEX(SUBSTRING_INDEX(reward_item_idx, "|", numbers.n), "|" , -1) AS splited_item_idx
			, (SELECT item_name FROM item_info WHERE item_idx = splited_item_idx) AS item_name
			, (SELECT item_condition FROM item_info WHERE item_idx = splited_item_idx) AS item_condition
		FROM (
			SELECT 1 AS n UNION ALL 
			SELECT 2 UNION ALL
			SELECT 3 UNION ALL
			SELECT 4 UNION ALL
			SELECT 5) AS numbers
	   	INNER JOIN reward_info r
		ON CHAR_LENGTH(reward_item_idx) - CHAR_LENGTH(REPLACE(reward_item_idx, "|", "")) >= numbers.n - 1
		WHERE r.reward_idx = #{reward_idx}
		ORDER BY reward_item_idx;
	</select>
	
	<!-- 아이템 옵션 -->
	<select id="selectItemOptionList" resultType="hashmap">
		SELECT *, SUBSTRING_INDEX(SUBSTRING_INDEX(multiple_option, "|", numbers.n), "|" , -1) AS splited_item_option
		from (
			SELECT 1 AS n UNION ALL 
			SELECT 2 UNION ALL
			SELECT 3 UNION ALL
			SELECT 4 UNION ALL
			SELECT 5) AS numbers
	    INNER JOIN item_info
	    ON CHAR_LENGTH(multiple_option) - CHAR_LENGTH(REPLACE(multiple_option, "|", "")) >= numbers.n - 1
		WHERE item_idx = #{item_idx}
	</select>
	
	<!-- 사용자 배송지 가져오기 -->
	<select id="selectUserAddress" resultType="address">
		SELECT *
		FROM user_address
		WHERE address_mem_email = #{mem_email}
		ORDER BY address_selected DESC 
				, address_receiver_name
	</select>
	
	<!-- 기본 배송지 여부 확인 -->
	<select id="selectAddressIsDefault" resultType="int">
		SELECT COUNT(*)
		FROM user_address u JOIN member m
		ON u.address_mem_email = m.mem_email
		WHERE 
			address_mem_email = #{id}
			AND address_is_default = 'Y'
			AND m.mem_status = 1;
	</select>
	
	<!-- 기본 배송지 변경 (원래 기본 배송지였던거를 N으로) -->
	<update id="updateDefaultAddressToN">
		UPDATE user_address
		SET address_is_default = 'N'
		WHERE 
			address_mem_email = #{id}
			AND address_is_default = 'Y';
	</update>
	
	<!-- 기본 배송지 변경 -->
	<update id="updateDefaultAddressToY">
		UPDATE user_address
		SET address_is_default = 'Y'
		WHERE 
			address_idx = #{address_idx}
			ANd address_is_default = 'N'
	</update>
	
	<!-- 배송지 등록 -->
	<insert id="insertNewAddress">
		INSERT INTO user_address 
		VALUES (
			null
			,#{address_mem_email}
			,#{address_receiver_name}
			,#{address_post_code}
			,#{address_main}
			,#{address_sub}
			,#{address_receiver_tel}
			<choose>
				<when test="address_is_default.equals('off')">
				,'N'
				</when>
				<otherwise>
				, 'Y'
				</otherwise>
			</choose>
			, default		
		)
	</insert>
	
	<!-- 배송지 삭제 -->
	<delete id="deleteAddress">
		DELETE FROM user_address
		WHERE address_idx = #{address_idx}
	</delete>
	
	<!-- 선택된 배송지 삭제하는 경우, 새로 selected 배송지 해줘야함 -->
	<update id="updateSelectedAddressToY2" parameterType="address">
		UPDATE user_address ua
		JOIN (
		    SELECT MAX(address_idx) as max_address_idx
		    FROM user_address
		    WHERE address_mem_email = #{id}
		) AS subquery
		ON ua.address_idx = subquery.max_address_idx
		SET ua.address_selected = 'Y'
	</update>
	
	<!-- 선택 배송지 여부 확인 -->
	<select id="selectAddressIsSelected" resultType="int">
		SELECT COUNT(*)
		FROM user_address u JOIN member m
		ON u.address_mem_email = m.mem_email
		WHERE 
			address_mem_email = #{id}
			AND address_selected = 'Y'
			AND m.mem_status = 1;;
	</select>
	
	<!-- 원래 선택배송지였던 걸 N으로 변경 -->
	<update id="updateSelectedAddressToN">
		UPDATE user_address
		SET address_selected = 'N'
		WHERE address_mem_email = #{id}
		AND address_selected = 'Y';
	</update>
	
	<!-- 선택 배송지로 변경 -->
	<update id="updateSelectedAddressToY">
		UPDATE user_address
		SET address_selected = 'Y'
		WHERE address_idx = #{address_idx}
	</update>
	
	<!-- 신고 접수 -->
	<insert id="insertReport">
		INSERT INTO report
		VALUES (
			null
			, #{report_mem_email}
			, #{report_project_code}
			, null
			, #{report_category}
			, #{report_reason}
			, #{report_file}
			, #{report_ref_url1}
			, #{report_ref_url2}
			, #{report_ref_url3}
			, now()
			, '접수완료'
		)
	</insert>
	
	<!-- 팔로우 한 적 있는지 확인부터 -->
	<select id="selectFollowCount" resultType="int">
		SELECT COUNT(*)
		FROM follow
		WHERE 
			follow_mem_email = #{id}
			AND follow_creator = #{follow_creator}
	</select>
	
	<!--  팔로우 기록 있는데 N 이니까 Y로 status 변경 -->
	<update id="updateFollow">
		UPDATE follow
		SET follow_status = 'Y'
		WHERE 
			follow_mem_email = #{id}
			AND follow_creator = #{follow_creator}
			AND follow_status = 'N'
	</update>
	
	<!-- 팔로우 등록 -->
	<insert id="insertFollow">
		INSERT INTO follow
		VALUES (
			null
			, #{id}
			, #{follow_creator}
			, 'Y'
		)
	</insert>
	
	<!--  언팔로우 - status 변경 -->
	<update id="unFollow">
		UPDATE follow
		SET follow_status = 'N'
		WHERE 
			follow_mem_email = #{follow_mem_email}
			AND follow_creator = #{follow_creator}
			AND follow_status = 'Y'
	</update>
	
	<!-- 좋아요 한 적 있는지 확인부터 -->
	<select id="selectLikeCount" resultType="int">
		SELECT COUNT(*)
		FROM like_
		WHERE 
			like_project_code = #{like_project_code}
			AND like_mem_email = #{like_mem_email}
	</select>
	
	<!--  좋아요 기록 있는데 N 이니까 Y로 status 변경 -->
	<update id="updateLike">
		UPDATE like_
		SET like_status = 'Y'
		WHERE 
			like_project_code = #{like_project_code}
			AND like_mem_email = #{like_mem_email}
			AND like_status = 'N'
	</update>
	
	<!-- 좋아요 등록 -->
	<insert id="insertLike">
		INSERT INTO like_
		VALUES (
			null
			, #{like_mem_email}
			, #{like_project_code}
			, null
			, 'Y'
		)
	</insert>
	
	<!--  좋아요 취소 -->
	<update id="cancelLike">
		UPDATE like_
		SET like_status = 'N'
		WHERE 
			like_project_code = #{like_project_code}
			AND like_mem_email = #{like_mem_email}
			AND like_status = 'Y'
	</update>
	
	<!-- 창작자의 누적 펀딩액 -->
	<select id="selectTotalFundAmtOfCreator" resultType="int">
		SELECT IFNULL(SUM(f.funding_pay_amt), 0)
		FROM project_info p 
		JOIN creator_info c
		ON p.creator_idx = c.creator_idx
		JOIN funding_user f
		ON p.project_idx = f.funding_project_idx
		WHERE c.creator_email = #{creator_email};
	</select>
	
	<!--  ============================================================================================  -->
	<!-- 일반 후원 등록 -->
	<insert id="insertDefaultFunding">
		INSERT INTO funding_user
		VALUES (
			null
			, #{user_funding_email}
			, #{user_funding_project_idx}
			, null						-- 리워드
			, null						-- 아이템 옵션
			, #{user_funding_count}
			, null
			, #{user_funding_plus_amt}
			<choose>
				<when test="user_funding_pay_method == 1 || user_funding_pay_method == 2">
					, now()
					, #{user_funding_pay_amt}
					, '후원완료'
				</when>
				<otherwise>
					, #{user_funding_pay_date}
					, #{user_funding_pay_amt}
					, '후원중'
				</otherwise>
			</choose>
		)
	</insert>
	
	<!-- 사용자 펀딩 등록 -->
	<insert id="insertUserFunding">
		INSERT INTO funding_user
		VALUES (
			null
			, #{user_funding_email}
			, #{user_funding_project_idx}
			, #{user_funding_reward_idx}
			, #{user_funding_item_option}
			, #{user_funding_count}
			, #{user_funding_address_idx}
			, #{user_funding_plus_amt}
			<choose>
				<when test="user_funding_pay_method == 1 || user_funding_pay_method == 2">
					, now()
					, #{user_funding_pay_amt}
					, '후원완료'
				</when>
				<otherwise>
					, #{user_funding_pay_date}
					, #{user_funding_pay_amt}
					, '후원중'
				</otherwise>
			</choose>
		)
	</insert>
	
	<!-- 몇 번째 후원자인지 카운트 -->
	<select id="selectFundCount" resultType="int">
		SELECT COUNT(funding_project_idx)
		FROM funding_user
		WHERE funding_project_idx = #{user_funding_project_idx};	
	</select>
	
	<!-- 방금 후원한 펀딩 idx 가져가기 -->
	<select id="selectNowFundingIdx" resultType="int">
		SELECT MAX(funding_idx)
		FROM funding_user
		WHERE funding_mem_email = #{id}
	</select>
	
	<!-- 결제 정보 db 저장 -->
	<insert id="insertPaymentInfo">
		<selectKey keyProperty="funding_idx" resultType="int" order="BEFORE">
			SELECT IFNULL(MAX(funding_idx),0)
			FROM funding_user
			WHERE funding_mem_email = #{user_funding_email}
		</selectKey>
		INSERT INTO project_payment
		VALUES (
			null
			, #{user_funding_email}
			, #{funding_idx}
			, #{user_funding_pay_method}
			, '미결제'
			, null
			, #{user_funding_pay_amt}
		)
	</insert>
	
	<!-- 오늘 결제하는 펀딩 리스트 -->
	<select id="selectTodayPayFunding" resultType="hashmap">
		SELECT f.*, m.mem_name AS name
		FROM funding_user f JOIN member m
		ON f.funding_mem_email = m.mem_email 
		WHERE (SELECT DATE_FORMAT(funding_pay_date, '%Y-%m-%d')) = #{now}
	</select>
	
	<!-- ======================================================================= -->
	<!-- 로그인 시 엑세스 정보 조회하여 저장하도록 처리해야하니까 일단 조회부터 --> 
	<!-- member 테이블도 조회하여 name 도 가져와야함 !~ --> 
	<select id="userSelectBankUserInfo" resultType="bankToken">
		SELECT * 
		FROM fintech_user_info AS f
		LEFT JOIN member AS m
		ON f.id = m.mem_email
		WHERE f.id = #{id}
	</select>
	
	<!-- 관리자 엑세스 토큰 가져오기 -->
	<!-- 위의 핀테크 사용자 정보 조회와 다른점: where 절 id 값만 다름. 위의 메서드 재사용해도 됨 -->
	<select id="selectAdminAccessToken" resultType="bankToken">
		SELECT *
		FROM bank_user_info
		WHERE id = 'admin'
	</select>
	
	<!-- fintech_user_info 테이블에 핀테크 use_num 저장 -->
	<update id="userUpdateFintechInfo">
		UPDATE fintech_user_info
		SET fintech_use_num = #{fin_use_num}, user_ci = #{user_ci}
		WHERE id = #{id}
	</update>
	
	<!-- user_account 테이블에 넣기 -->
	<insert id="userInsertAccountInfo">
		<selectKey keyProperty="funding_idx" resultType="int" order="BEFORE">
			SELECT IFNULL(MAX(funding_idx),0)
			FROM funding_user
			WHERE funding_mem_email = #{user_funding_email}
		</selectKey>
		INSERT INTO user_account
		VALUES (
			#{user_funding_email}
			, #{mem_name}
			, #{funding_idx}
			, #{fintech_use_num}
			, #{tranDtime}
		)
	</insert>
	
	<!-- project_payment 테이블에 오늘 날짜로 결제 날짜 업데이트 하기 --> 
	<update id="updatePayDate">
		UPDATE project_payment
		SET pro_pay_date = now(), pro_pay_status = '결제완료'
		WHERE pro_mem_email = #{id} AND pro_pay_amt = #{tran_amt}
	</update>
	
	<!-- 결제 완료 되면 status 후원 완료로 변경 -->
	<update id="updateFundingStatus">
		UPDATE funding_user
		SET funding_status = '후원완료'
		WHERE funding_idx = #{funding_idx}
	</update>
	
	<!-- 목록필터 - 진행 중 -->
	<select id="selectProjectListFilter1" resultType="hashmap">
		SELECT p.*, c.*, 
		<if test="id">
			l.like_mem_email, l.like_status,
		</if>
			(SELECT IFNULL(SUM(funding_pay_amt),0) FROM funding_user WHERE funding_project_idx = p.project_idx) AS funding_amt
		FROM project_info p JOIN creator_info c
		ON p.creator_idx = c.creator_idx
		<if test="id">
			LEFT JOIN like_ l
			ON p.project_code = l.like_project_code AND l.like_mem_email = #{id}
		</if> 
		<![CDATA[ WHERE p.funding_start_date < now() AND p.funding_end_date > now() AND	p.project_status = '승인']]>
	</select>
</mapper>