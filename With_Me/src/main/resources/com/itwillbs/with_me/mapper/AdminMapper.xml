<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.itwillbs.with_me.mapper.AdminMapper">
	<!-- 회원 목록 개수 조회 -->
	<select id="selectMemberListCount" resultType="int">
		SELECT COUNT(*)
		FROM member
		<if test="!searchKeyword.equals('')">
			WHERE 
				mem_idx like concat('%',#{searchKeyword},'%')
				or mem_email like concat('%',#{searchKeyword},'%')
				or mem_name like concat('%',#{searchKeyword},'%')
				or mem_sign_date like concat('%',#{searchKeyword},'%')
				or mem_status like concat('%',#{searchKeyword},'%')
		</if>
	</select>
	
	<!-- 회원 목록 조회 -->
	<select id="selectMemberList" resultType="member">
		SELECT * 
		FROM member
		<if test="!searchKeyword.equals('')">
			WHERE 
				mem_idx like concat('%',#{searchKeyword},'%')
				or mem_email like concat('%',#{searchKeyword},'%')
				or mem_name like concat('%',#{searchKeyword},'%')
				or mem_sign_date like concat('%',#{searchKeyword},'%')
				or mem_status like concat('%',#{searchKeyword},'%')
		</if>
		ORDER BY
			mem_isAdmin DESC
			, mem_idx DESC
		LIMIT
			#{startRow}
			, #{listLimit}
	</select>
	
	<!-- 관리자 권한 부여 / 해제 -->
	<!-- 파라미터로 받은 MemberVO 객체의 mem_isAdmin 값을 활용하여 -->
	<!-- 일반 사용자에게는 관리자 권한 부여, 관리자는 권한 해제 -->
	<update id="updateAdminAuth">
		UPDATE member
		SET 
			<choose>
				<when test="mem_isAdmin == 0">
					mem_isAdmin = 1
				</when>
				<otherwise>
					mem_isAdmin = 0
				</otherwise>
			</choose>
		WHERE mem_email = #{mem_email}
	</update>
	
	<!-- 후원내역 개수 조회 -->
	<select id="selectSponsorshipHistoryListCount" resultType="int">
		SELECT COUNT(*)
		FROM project_payment pp
		JOIN pay_method pm
		ON pp.pro_funding_pay_method_idx = pm.pay_method_idx
		JOIN funding_user fu
		ON fu.funding_idx = pp.pro_funding_idx
		JOIN project_info pi
		ON pi.project_idx = fu.funding_project_idx
		WHERE pro_mem_email = #{member.mem_email}
		<if test="!searchKeyword.equals('')">
			AND (
				pi.project_code like concat('%',#{searchKeyword},'%')
				or pi.project_title like concat('%',#{searchKeyword},'%')
				or pp.pro_pay_status like concat('%',#{searchKeyword},'%')
				or pp.pro_pay_date like concat('%',#{searchKeyword},'%')
				or pp.pro_pay_amt like concat('%',#{searchKeyword},'%')
				or pm.pay_method_name like concat('%',#{searchKeyword},'%')
			)
		</if>
	</select>
	
	<!-- 후원내역 조회 -->
	<select id="selectSponsorshipHistory" resultType="Map">
		SELECT * 
		FROM project_payment pp
		JOIN pay_method pm
		ON pp.pro_funding_pay_method_idx = pm.pay_method_idx
		JOIN funding_user fu
		ON fu.funding_idx = pp.pro_funding_idx
		JOIN project_info pi
		ON pi.project_idx = fu.funding_project_idx
		WHERE pro_mem_email = #{member.mem_email}
		<if test="!searchKeyword.equals('')">
			AND (
				pi.project_code like concat('%',#{searchKeyword},'%')
				or pi.project_title like concat('%',#{searchKeyword},'%')
				or pp.pro_pay_status like concat('%',#{searchKeyword},'%')
				or pp.pro_pay_date like concat('%',#{searchKeyword},'%')
				or pp.pro_pay_amt like concat('%',#{searchKeyword},'%')
				or pm.pay_method_name like concat('%',#{searchKeyword},'%')
			)
		</if>
		ORDER BY
			pp.pro_pay_idx DESC
		LIMIT
			#{startRow}
			, #{listLimit}
	</select>
	
	<!-- 구매내역 개수 조회 -->
	<select id="selectPurchaseHistoryListCount" resultType="int">
		SELECT COUNT(*)
		FROM product_payment pp
		JOIN pay_method pm
		ON pp.order_pay_method_idx = pm.pay_method_idx
		JOIN product_info pi
		ON pi.product_idx = pp.product_idx
		WHERE order_mem_email = #{member.mem_email}
		<if test="!searchKeyword.equals('')">
			AND (
				pi.product_code like concat('%',#{searchKeyword},'%')
				or pi.product_name like concat('%',#{searchKeyword},'%')
				or pp.order_pay_status like concat('%',#{searchKeyword},'%')
				or pp.order_pay_date like concat('%',#{searchKeyword},'%')
				or pp.order_pay_cost like concat('%',#{searchKeyword},'%')
				or pm.pay_method_name like concat('%',#{searchKeyword},'%')
			)
		</if>
	</select>
	
	<!-- 구매내역 조회 -->
	<select id="selectPurchaseHistory" resultType="Map">
		SELECT * 
		FROM product_payment pp
		JOIN pay_method pm
		ON pp.order_pay_method_idx = pm.pay_method_idx
		JOIN product_info pi
		ON pi.product_idx = pp.product_idx
		WHERE order_mem_email = #{member.mem_email}
		<if test="!searchKeyword.equals('')">
			AND (
				pi.product_code like concat('%',#{searchKeyword},'%')
				or pi.product_name like concat('%',#{searchKeyword},'%')
				or pp.order_pay_status like concat('%',#{searchKeyword},'%')
				or pp.order_pay_date like concat('%',#{searchKeyword},'%')
				or pp.order_pay_cost like concat('%',#{searchKeyword},'%')
				or pm.pay_method_name like concat('%',#{searchKeyword},'%')
			)
		</if>
		ORDER BY
			pp.order_product_idx DESC
		LIMIT
			#{startRow}
			, #{listLimit}
	</select>
	
	<!-- 프로젝트 개수 조회 -->
	<select id="selectProjectListCount" resultType="int">
		SELECT COUNT(*)
		FROM project_info
		WHERE 
		<choose>
			<when test="projectStatus.equals('심사중')">
				project_status = '심사중'
			</when>
			<when test="projectStatus.equals('승인')">
				project_status = '승인'
				AND funding_end_date &gt; now()
			</when>
			<when test="projectStatus.equals('종료')">
				project_status = '승인'
				AND funding_end_date &lt; now()
			</when>
		</choose>
		<if test="!searchKeyword.equals('')">
			AND (
				project_code like concat('%',#{searchKeyword},'%')
				or project_title like concat('%',#{searchKeyword},'%')
				or project_category like concat('%',#{searchKeyword},'%')
				or project_category_detail like concat('%',#{searchKeyword},'%')
				or target_price like concat('%',#{searchKeyword},'%')
				or funding_start_date like concat('%',#{searchKeyword},'%')
				or funding_end_date like concat('%',#{searchKeyword},'%')
			)
		</if>
	</select>
	
	<!-- 프로젝트 목록 조회 -->
	<select id="selectProjectList" resultType="project">
		SELECT * 
		FROM project_info
		WHERE 
		<choose>
			<when test="projectStatus.equals('심사중')">
				project_status = '심사중'
			</when>
			<when test="projectStatus.equals('승인')">
				project_status = '승인'
				AND funding_end_date &gt; now()
			</when>
			<when test="projectStatus.equals('종료')">
				project_status = '승인'
				AND funding_end_date &lt; now()
			</when>
		</choose>
		<if test="!searchKeyword.equals('')">
			AND (
				project_code like concat('%',#{searchKeyword},'%')
				or project_title like concat('%',#{searchKeyword},'%')
				or project_category like concat('%',#{searchKeyword},'%')
				or project_category_detail like concat('%',#{searchKeyword},'%')
				or target_price like concat('%',#{searchKeyword},'%')
				or funding_start_date like concat('%',#{searchKeyword},'%')
				or funding_end_date like concat('%',#{searchKeyword},'%')
			)
		</if>
		ORDER BY
			project_idx DESC
		LIMIT
			#{startRow}
			, #{listLimit}
	</select>
	
	<!-- 프로젝트 상태 변경 -->
	<update id="updateProjectStatus">
		UPDATE project_info
		<choose>
			<when test="status.equals('승인')">
				SET project_status = '승인'
			</when>
			<when test="status.equals('거부')">
				SET project_status = '반려'
			</when>
			<when test="status.equals('취소')">
				SET project_status = '취소'
			</when>
		</choose>
		WHERE project_idx = #{project.project_idx}
	</update>
	
	<!-- 프로젝트 취소 신청여부 조회 -->
	<select id="selectProjectCancel" resultType="projectCancel">
		SELECT * 
		FROM project_cancel
		WHERE project_idx = #{project_idx}
	</select>
	
	<!-- 프로젝트 취소 승인여부 변경 -->
	<update id="updateProjectCancelStatus">
		UPDATE project_cancel
		SET project_cancel_status = '취소승인'
		WHERE project_idx = #{project.project_idx}
	</update>
	
	<!-- 공지사항 개수 조회 -->
	<select id="selectNoticeListCount" resultType="int">
		SELECT COUNT(*)
		FROM notice
		<if test="!searchKeyword.equals('')">
			WHERE 
				bo_idx like concat('%',#{searchKeyword},'%')
				or bo_subject like concat('%',#{searchKeyword},'%')
				or bo_content like concat('%',#{searchKeyword},'%')
				or bo_file like concat('%',#{searchKeyword},'%')
				or bo_sysdate like concat('%',#{searchKeyword},'%')
				or bo_readcount like concat('%',#{searchKeyword},'%')
		</if>
	</select>
	
	<!-- 공지사항 목록 조회 -->
	<select id="selectNoticeList" resultType="bo">
		SELECT * 
		FROM notice
		<if test="!searchKeyword.equals('')">
			WHERE 
				bo_idx like concat('%',#{searchKeyword},'%')
				or bo_subject like concat('%',#{searchKeyword},'%')
				or bo_content like concat('%',#{searchKeyword},'%')
				or bo_file like concat('%',#{searchKeyword},'%')
				or bo_sysdate like concat('%',#{searchKeyword},'%')
				or bo_readcount like concat('%',#{searchKeyword},'%')
		</if>
		ORDER BY
			bo_idx DESC
		LIMIT
			#{startRow}
			, #{listLimit}
	</select>
	
	<!-- 공지사항 등록 -->
	<insert id="insertNotice">
		<selectKey keyProperty="bo_idx" resultType="int" order="BEFORE">
			SELECT IFNULL(MAX(bo_idx), 0) -- bo_idx 최대값 조회(null 일 경우 기본값 0 사용)
			FROM notice
		</selectKey>
		<!-- 새 글 번호와 참조글 번호는 <selectKey> 를 통회 조회한 #{bo_idx} 값 사용 -->
		INSERT
		INTO notice
		VALUES (
			#{bo_idx} + 1
			, #{bo_subject}
			, #{bo_idx} + 1  -- bo_re_ref(selectKey 를 통회 조회된 게시물 번호 + 1 값 사용)
			, 0                 -- bo_re_lev
			, 0                 -- bo_re_seq
			, #{bo_content}
			, #{bo_file}
			, now()
			, 0                 -- bo_readcount
		)
	</insert>
	
	<!-- 공지사항 수정 - 파일 삭제 -->
	<update id="deleteFile">
		UPDATE notice
		SET bo_file = CASE WHEN bo_file = #{bo_file} THEN '' ELSE bo_file END
		WHERE bo_idx = #{bo_idx}
	</update>
	
	<!-- 공지사항 수정 -->
	<update id="updateNotice">
		UPDATE notice
		SET
			bo_subject = #{bo_subject}
			, bo_content = #{bo_content}
			<if test="!bo_file.equals('')">
				, bo_file = #{bo_file} -- bo_file 존재할 경우 UPDATE 항목 추가
			</if>
		WHERE bo_idx = #{bo_idx}	
	</update>
	
	<!-- 공지사항 삭제 -->
	<delete id="deleteNotice">
		DELETE FROM notice
		WHERE bo_idx = #{bo_idx}
	</delete>
</mapper>