<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
    
<mapper namespace="com.itwillbs.with_me.mapper.CreatorFundingMapper">
<!-- 프로젝트 목록 조회 - SELECT -->
<select id="selectProjectList" resultType="hashmap">
	SELECT *
	FROM project_info
	WHERE creator_idx = (
		SELECT creator_idx
		FROM creator_info
		WHERE creator_email = #{id})
	<if test="status != ''">
        AND project_status = #{status}
    </if>
	ORDER BY project_submit_date desc	-- 최근에 수정(제출) 한 순서
</select>

<!-- 상위공통코드 FUND 인 컬럼(카테고리) 조회 - SELECT -->
<select id="selectCategory" resultType='commonCode'>
	SELECT *
	FROM common_code
	WHERE common_code_top = 'FUND'
</select>

<!-- 세부 카테고리 조회 - SELECT -->
<!-- 파라미터가 common_code_name 형태이므로 서브쿼리에서 common_code 찾아서 조회 -->
<select id="selectCategoryDetail" resultType='commonCode'>
	SELECT *
	FROM common_code
	WHERE common_code_top = #{project_category}
	OR common_code_top = (SELECT common_code
						  FROM common_code
						  WHERE common_code_name = #{project_category}
						  AND common_code_top = 'FUND')
</select>

<!-- 창작자 정보 조회 - SELECT -->
<select id="selectCreator" resultType="creator">
	SELECT *
	FROM creator_info
	WHERE creator_email = #{id}

</select>
<!-- 창작자 정보 등록 - INSERT -->
<insert id="insertCreator">
	INSERT INTO creator_info
	VALUES (
		null	-- creator_idx(auto_increment)
		, #{id}	-- creator_email
		, ''	-- 임시값("") creator_name
		, ''	-- 임시값("") creator_image
		, ''	-- 임시값("") creator_introduce
	)
</insert>

<!-- 프로젝트 등록 - INSERT -->
<insert id="insertProject">
	<selectKey keyProperty="project_idx" resultType="int" order="BEFORE">
		SELECT IFNULL(MAX(project_idx), 0) -- project_idx 최대값 조회(null 일 경우 기본값 0 사용)
		FROM project_info
	</selectKey>
	INSERT INTO project_info
	VALUES (
		null										-- project_idx
		, CONCAT('FUND', #{project.project_category}, '___', #{project_idx} + 1)	-- project_code
		, '작성중'									-- project_status
		, #{creator_idx}							-- creator_idx
		, (SELECT common_code_name
		   FROM common_code
		   WHERE common_code = #{project.project_category}
		   AND common_code_top = 'FUND')				-- project_category
		, ''										-- project_category_detail
		, #{project.project_title}					-- project_title
		, ''		-- project_summary
		, ''		-- project_image
		, ''		-- search_tag
		, 0			-- target_price
		, 0		-- funding_commission
		, 0			-- funding_premium
		, null		-- funding_start_date
		, null		-- funding_end_date
		, ''		-- project_introduce
		, ''		-- project_budget
		, null		-- project_schedule
		, null		-- project_team_interduce
		, null		-- project_sponsor
		, null		-- project_policy
		, now()		-- project_submit_date
	)
</insert>

<!-- 프로젝트 번호 조회 - SELECT -->
<select id="selectProjectIdx">
	SELECT project_idx
	FROM project_info
	WHERE creator_idx = (
		SELECT creator_idx
		FROM creator_info
		WHERE creator_email = #{id})
	AND project_status = '작성중'
	ORDER BY project_submit_date desc	-- 최근에 수정(제출) 한 순서
	Limit 1								-- 그 중에 첫번째 행
</select>

<!-- 프로젝트 정보 조회 - SELECT -->
<select id="selectProject">
	SELECT *
	FROM project_info
	WHERE project_idx = #{project_idx}
</select>

<!-- 아이템 등록 -INSERT -->
<insert id="insertItem">
	INSERT INTO item_info
	VALUES (
		null	-- AUTO_INCREMENT
		, #{project_idx}
		, #{item_name}
		, #{item_condition}
		, #{multiple_option}
	)
</insert>

<!-- 아이템 리스트 조회 -SELECT -->
<select id="selectItemList" resultType="item">
	SELECT 
		item_idx, project_idx, item_name, item_condition, 
		REPLACE(multiple_option, '|', ' | ') AS multiple_option
	FROM item_info
	WHERE project_idx = #{project_idx}
</select>

<!-- 삭제하려는 아이템이 포함되어 있는 후원구성 개수 조회 - SELECT -->
<select id="selectRewardIdxList" resultType="hashmap">
	SELECT r.reward_idx
	FROM reward_info r
	JOIN project_info p ON r.project_idx = p.project_idx
	JOIN item_info i ON p.project_idx = i.project_idx
	WHERE i.item_idx = #{item_idx}
	AND FIND_IN_SET(#{item_idx}, REPLACE(r.reward_item_idx, '|', ',')) > 0
</select>

<!-- 아이템 삭제 - DELETE -->
<delete id="deleteItem">
	DELETE FROM item_info
	WHERE item_idx = #{item_idx}
</delete>

<!-- 아이템 포함되어 있는 후원구성까지 삭제 - DELETE -->
<delete id="deleteIncludeReward">
	DELETE r
	FROM reward_info r
	JOIN (
	    SELECT r.reward_idx
	    FROM reward_info r
	    JOIN project_info p ON r.project_idx = p.project_idx
	    JOIN item_info i ON p.project_idx = i.project_idx
	    WHERE i.item_idx = #{item_idx}
	    AND FIND_IN_SET(#{item_idx}, REPLACE(r.reward_item_idx, '|', ',')) > 0
	) AS subquery ON r.reward_idx = subquery.reward_idx
</delete>

<!-- 후원 구성 등록 - INSERT -->
<insert id="insertReward">
	INSERT INTO reward_info
	VALUES (
		null	-- AUTO_INCREMENT
		, #{project_idx}
		, #{reward_title}
		, #{reward_item_idx}
		, #{amount_limit}
		<if test="item_amount != null and item_amount != ''">
			, #{item_amount}	-- 수량제한 있음 일 경우
        </if>
        <if test="item_amount == null or item_amount == ''">
			, NULL	-- 수량제한 없음 일 경우
        </if>
		, #{delivery_status}
		, #{reward_price}
	)
</insert>

<!-- 후원 구성 리스트 조회 - SELECT -->
<select id="selectRewardList" resultType="hashmap">
	SELECT 
		r.*,
		(SELECT GROUP_CONCAT(i.item_name SEPARATOR ' | ')
		 FROM item_info i
		 WHERE FIND_IN_SET(i.item_idx, REPLACE(r.reward_item_idx, '|', ','))
		) AS item_details	-- reward_item_idx 로 item_name 추출
	FROM 
		reward_info r
	WHERE 
		r.project_idx = #{project_idx}
</select>

<!-- 후원 구성 삭제 - DELETE -->
<delete id="deleteReward">
	DELETE FROM reward_info
	WHERE reward_idx = #{reward_idx}
</delete>

<!-- 프로젝트 임시저장 - UPDATE -->
<update id="updateProject">
    UPDATE project_info
    SET 
    	<if test="!project_code.equals('FUND')">
	        project_code = #{project_code}, 
    	</if>
        <if test="!project_status.equals('')">
            project_status = #{project_status}, 
        </if>
        project_category = (SELECT common_code_name
                            FROM common_code
                            WHERE common_code = #{project_category}
                            AND common_code_top = 'FUND'), 
        <if test="!project_category_detail.equals('')">
        	project_category_detail = (SELECT common_code_name
             	                       FROM common_code
               		                   WHERE common_code = #{project_category_detail}), 
        </if>
        <if test="project_category_detail.equals('')">
            project_category_detail = '', 
        </if>
        project_title = #{project_title}, 
        project_summary = #{project_summary}, 
        project_image = #{project_image}, 
        search_tag = #{search_tag}, 
        target_price = #{target_price}, 
        funding_commission = #{funding_commission}, 
        funding_start_date = CASE 
            WHEN #{funding_start_date} != '' THEN #{funding_start_date}  -- 시작일 선택시에만 값 넣기
            ELSE null END, 
        funding_end_date = CASE 
            WHEN #{funding_end_date} != '' THEN #{funding_end_date} 
            ELSE null END, 
        project_introduce = #{project_introduce}, 
        project_budget = #{project_budget}, 
        project_schedule = #{project_schedule}, 
        project_team_introduce = #{project_team_introduce}, 
        project_sponsor = #{project_sponsor}, 
       	project_policy = #{project_policy}, 
        project_submit_date = now()
    WHERE project_idx = #{project_idx}
</update>


<!-- 창작자정보 임시저장 - UPDATE -->
<update id="updateCreator">
	UPDATE creator_info
	SET
		creator_email = #{creator_email}
		, creator_name = #{creator_name}
		, creator_image = #{creator_image}
		, creator_introduce = #{creator_introduce}
	WHERE creator_email = #{creator_email}
</update>

<!-- 프로젝트 삭제 - DELETE -->
<delete id="deleteProject">
	DELETE FROM project_info
	WHERE project_idx = #{project_idx}
</delete>

<!-- 프로젝트 삭제 요청 폼 제출 - INSERT -->
<insert id="insertRequestDeleteProject">
	INSERT INTO project_cancel
	VALUES (
		null						-- project_cancel_idx
		, #{project_idx}			-- project_idx
		, #{project_cancel_reason}	-- project_cancel_reason
		, '취소대기'				-- project_cancel_status
	)
</insert>

<!-- 프로젝트 취소 요청한 프로젝트 조회 - SELECT -->
<select id="selectDeleteRequestList" resultType="String">
	SELECT project_idx
	FROM project_cancel
	WHERE project_idx IN (SELECT project_idx 
						  FROM project_info
				          WHERE creator_idx = (SELECT creator_idx 
											 FROM creator_info
				                             WHERE creator_email = #{id}))
</select>

</mapper>