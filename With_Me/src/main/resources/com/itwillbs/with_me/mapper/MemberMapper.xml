<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
    
<mapper namespace="com.itwillbs.with_me.mapper.MemberMapper">

	<!-- 회원가입 회원정보 -->
	<insert id="insertMember">
		INSERT
		INTO member
		VALUES (
			null
			,#{mem_email}
			,#{mem_name}
			,#{mem_passwd}
			,#{mem_post_code}
			,#{mem_add1}
			,#{mem_add2}
			,#{mem_tel}
			, 1                   -- sns수신
			,#{mem_birthday}
			, now()               -- 가입일자
			, null                -- 탈퇴일자
			, 1                   -- 회원상태(1 : 정상, 2 : 휴면, 3 : 탈퇴)
			, 'N'                 -- 메일인증여부
			, 0                   -- 관리자여부(0 : 일반, 1 : 관리자)
		)
	</insert>
	
	<!-- 회원 상세정보 조회 SELECT-->
	<!-- 아이디(email)가 일치하는 레코드 조회-->
	<select id="selectMember" resultType="member">
		SELECT *
		FROM member
		WHERE mem_email = #{mem_email}
		OR mem_tel = #{mem_tel}
		OR mem_name = #{mem_name}
	</select>
	
	<!-- 전화번호로 아이디 조회 -->
	<select id="selectId" resultType="member">
		SELECT *
		FROM member
		WHERE mem_email = #{mem_email}
	</select>
	
	<!-- 이메일 인증 정보 조회 -->
	<!-- 이메일주소에 해당하는 정보 조회 -->
	<select id="selectMailAuthInfo" resultType="mailAuth">
		SELECT *
		FROM mail_auth_info
		WHERE email = #{email}
	</select>
	
	<!-- 이메일 인증 정보 등록 -->
	<insert id="insertMailAuthInfo">
		INSERT
		INTO mail_auth_info
		VALUES (
			#{email}
			,#{auth_code}
		)
	</insert>
	
	<!-- 이메일 인증 정보 수정 -->
	<update id="updateMailAuthInfo">
		UPDATE mail_auth_info
		SET
			auth_code = #{auth_code}
		WHERE
			email = #{email}
	</update>
	
	<!-- 이메일 인증 상태 수정 -->
	<update id="updateMailAuthStatus">
		UPDATE member
		SET
			mem_mail_auth_status = 'Y'
		WHERE
			mem_email = #{email}     -- authInfo 안에 email값으로 mem_email을 찾아서 업데이트
	</update>
	
	<!-- 이메일 인증 정보 삭제 -->
	<delete id="deleteMailAuthInfo">
		DELETE
		FROM mail_auth_info
		WHERE
			email = #{email}
	</delete>
	
	<!-- 세션 아이디인 이메일로 창작자 조회 -->
	<select id="selectCreator" resultType="hashmap">
		SELECT c.creator_idx, c.creator_email, c.creator_name, c.creator_image, c.creator_introduce, c.phone_auth_status
				, m.mem_email
		FROM member m JOIN creator_info c
		ON m.mem_email = c.creator_email
		WHERE m.mem_email = #{mem_email}
	</select>
	
	<!-- 상대방 마이페이지 이메일로 창작자 조회 -->
	<select id="selectOtherCreatorInfo" resultType="creator">
		SELECT c.creator_idx, c.creator_email, c.creator_name, c.creator_image, c.creator_introduce, c.phone_auth_status
				, m.mem_email
		FROM creator_info c JOIN member m
		ON m.mem_email = c.creator_email
		WHERE creator_email = #{creatorEmail}
	</select>
	
	<!-- 프로젝트 전체 리스트 개수 조회 -->
	<select id="selectProjectListCount" resultType="int">
		SELECT COUNT(*)
		FROM project_info
	</select>
	
	
	<!-- 프로젝트 리스트 -->
	<select id="selectProjectList" resultType="hashmap">
		SELECT * 
			, (SELECT IFNULL(SUM(funding_pay_amt),0) 
				FROM funding_user 
				WHERE funding_project_idx = p.project_idx) AS funding_amt
		FROM project_info p 
		JOIN creator_info c
		ON p.creator_idx = c.creator_idx
		limit 
			#{startRow}             -- Mapper 내의 메서드에서 @Param("startRow")
			, #{listLimit}			-- Mapper 내의 메서드에서 @Param("listLimit")
	</select>
	
	<!-- 팔로워 값 가져오기(조회) -->
<!-- 	<select id="selectFollower" resultType="hashmap"> -->
<!-- 		SELECT f.follow_idx, f.follow_mem_email, f.follow_creator -->
<!-- 		FROM follow f JOIN member m -->
<!-- 		ON m.mem_email = f.follow_mem_email -->
<!-- 		WHERE mem_email = #{mem_email} -->
<!-- 	</select> -->
	
	<!-- 팔로우 전체 리스트 개수 조회 -->
	<select id="selectFollowListCount" resultType="int">
		SELECT COUNT(*)
		FROM follow
	</select>
	
	<!-- 좋아요 전체 리스트 개수 조회 -->
	<select id="selectLikeListCount" resultType="int">
		SELECT COUNT(*)
		FROM like_
	</select>
	
	<!-- 내 마이페이지에서 팔로우 리스트 조회 -->
	<select id="selectFollowList" resultType="hashmap">
		SELECT *,
			(SELECT mem_name
		 	FROM member m
         	WHERE f.follow_mem_email = m.mem_email) AS mem_name,
         	(SELECT creator_name
			 FROM creator_info c
        	 WHERE f.follow_mem_email = c.creator_email) AS creator_name
		FROM follow f
		WHERE follow_creator = #{mem_email}
		LIMIT
			#{startRow}     
			, #{listLimit}  
	</select>
	
	
	<!-- 크리에이터 이메일로 mem_email값 가져오기 -->
<!-- 	<select id="selectMemEmail" resultType="String"> -->
<!-- 		SELECT m.mem_email -->
<!-- 		FROM member m JOIN creator_info c -->
<!-- 		ON m.mem_email = c.creator_email -->
<!-- 		WHERE c.creator_email = #{creatorEmail} -->
<!-- 	</select> -->
	
	<!-- 창작자가 아닌 상대방 마이페이지에서 팔로우 리스트 조회(나를 팔로우 한 사람) -->
	<select id="selectOtherNoCreatorFollowList" resultType="hashmap">
		SELECT *,
			(SELECT mem_name
		 	FROM member m
         	WHERE f.follow_mem_email = m.mem_email) AS mem_name,
         	(SELECT creator_name
			 FROM creator_info c
        	 WHERE f.follow_mem_email = c.creator_email) AS creator_name
		FROM follow f
		WHERE follow_creator = #{mem_email}
		LIMIT
			#{startRow}     -- Mapper 내의 메서드에서 @Param("startRow") 로 지정한 파라미터명 사용
			, #{listLimit}  -- Mapper 내의 메서드에서 @Param("listLimit") 로 지정한 파라미터명 사용
	</select>
	
	<!-- 창작자인 상대방 마이페이지에서 팔로우 리스트 조회(나를 팔로우 한 사람) -->
	<select id="selectOtherCreatorFollowList" resultType="hashmap">
		SELECT *,
			(SELECT mem_name
		 	FROM member m
         	WHERE f.follow_mem_email = m.mem_email) AS mem_name,
         	(SELECT creator_name
			 FROM creator_info c
        	 WHERE f.follow_mem_email = c.creator_email) AS creator_name
		FROM follow f
		WHERE follow_creator = #{getCreator_email}
		LIMIT
			#{startRow}     -- Mapper 내의 메서드에서 @Param("startRow") 로 지정한 파라미터명 사용
			, #{listLimit}  -- Mapper 내의 메서드에서 @Param("listLimit") 로 지정한 파라미터명 사용
	</select>
	
	
	<!-- 내가 팔로우한 사람이 팔로우한 수 -->
<!-- 	<select id="selectFollowerCount" resultType="hashmap"> -->
<!-- 		SELECT COUNT(f.follow_creator) -->
<!-- 		FROM follow f JOIN creator_info c -->
<!-- 		ON f.follow_creator = c.creator_email -->
<!-- 		WHERE f.follow_mem_email = #{follow_mem_email} -->
<!-- 	</select> -->
	
	<!-- 창작자에 등록되어있는지(상대방 마이페이지) -->
	<select id="selectCreatorName" resultType="String">
	    SELECT creator_name
	    FROM creator_info
	    WHERE creator_email = #{creatorEmail}
	</select>
	
	<!-- 상대방 마이페이지(창작자가 아닌 경우) -->
	<select id="selectMemberInfo" resultType="member">
	    SELECT *
	    FROM member
	    WHERE mem_email = #{mem_email}
	</select>
	
	<!-- 상대방 마이페이지(창작자인 경우) -->
<!-- 	<select id="selectOtherCreatorInfo" resultType="creator"> -->
<!-- 	    SELECT creator_idx, creator_email, creator_name, creator_image, creator_introduce, phone_auth_status -->
<!-- 	    FROM creator_info -->
<!-- 	    WHERE creator_email = #{mem_email} -->
<!-- 	</select> -->
	
	
	<!-- =========================================================== -->
	<!-- 회원 아이디 조회(채팅) -->
	<select id="selectMemberId" resultType="String">
		SELECT mem_email
		FROM member
		WHERE mem_email = #{receiver_id}
	</select>
	
	<!-- ==================================================== -->
	<!-- 회원가입 시 배송지 등록 -->
	<insert id="insertTransAddress">
		INSERT INTO user_address 
		VALUES (
			null
			, #{address_mem_email}
			, #{address_receiver_name}
			, #{address_post_code}
			, #{address_main}
			, #{address_sub}
			, #{address_receiver_tel}
			,'Y'
			, default		
		)
	</insert>
	
</mapper>










