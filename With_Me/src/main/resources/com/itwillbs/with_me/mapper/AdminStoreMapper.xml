<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.itwillbs.with_me.mapper.AdminStoreMapper">
<!-- 동적 SQL 기능 활용하여 SQL 구문을 다르게 구성 가능 
	FROM 절 이후의 검색타입과 검색어에 따른 WHERE절을 다르게 구성
	
	[동적 SQL문]
	- 어떤 조건에 따라 실행할 SQL 문장을 다르게 구성한 SQL 구문
	- JSTL에서 조건에 따라 문장을 다르게 실행하는 것과 거의 동일
		<c:if>, <c:choose><c:when><c:otherwise> => c: 제거하면 거의 동일
		
	조건1) 검색어(searchKeyword)가 널스트링이 아닐 때 WHERE 절 추가 => if 태그 필요
	조건2) 검색어가 있을 경우 WHERE 절 뒷 부분에 검색타입(searchType)에 따라 컬럼명 다르게 검색
			=> 복수개의 조건에 따른 동적 SQL 문을 작성하기 위해 choose, when, otherwise 태그 필요
			
	=> 결론> 테이블명, LIKE 절 등에 전달되는 데이터는 ${} 사용하고
	외부로부터 입력받는 대부분의 데이터는 #{} 사용하자!
	=> 결론2> LIKE절에 % 결합 시 CONCAT() 함수 활용하자

 -->
<!--  1. 검색어(searchKeyword)가 널스트리잉 아닐 때 검색어를 추가하기 위한 WHERE 절 추가
=> 검색어 데이터는 searchKeyword 변수에 저장되어 있으므로 변수명 그대로 활용
=> 자바 문법과 동일하게 equals() 메서드를 통해 문자열 비교 수행 -->
	
	
	<!-- 글 목록 조회 시 검색 기능 추가 -->
	<select id="selectProductList" resultType="store">
		SELECT *
		FROM product_info
		<if test="!searchKeyword.equals('')">
			WHERE 
			<choose>
				<when test="searchType.equals('code')">
					product_code LIKE CONCAT('%', #{searchKeyword}, '%')
				</when>
				<when test="searchType.equals('name')">
<!-- 					board_content LIKE '%${searchKeyword}%' -->
					product_name LIKE CONCAT('%', #{searchKeyword}, '%')
				</when>
				<otherwise>
					1 = 1  -- WHERE 절을 포함시키되 조건을 걸고 싶지 않을 경우 활용 가능한 조건식(무조건 true 가 나오는 식이면 OK)
				</otherwise>
			</choose>
		</if>
		
		ORDER BY
			product_created DESC
		LIMIT
			#{startRow}     -- Mapper 내의 메서드에서 @Param("startRow") 로 지정한 파라미터명 사용
			, #{listLimit}  -- Mapper 내의 메서드에서 @Param("listLimit") 로 지정한 파라미터명 사용
	</select>
	
	<!-- 전체 상품 수 조회 - SELECT -->
	<!-- 검색 기능 추가를 위해 검색어에 따른 결과 게시물 수 조회 -->
	<select id="selectProcutListCount" resultType="int">
		SELECT COUNT(*)
		FROM product_info
	</select>
	
	<insert id="insertProduct">
		<selectKey keyProperty="product_idx" resultType="int" order="BEFORE">
			SELECT IFNULL(MAX(product_idx), 0) -- product_idx 최대값 조회(null 일 경우 기본값 0 사용)
			FROM product_info
		</selectKey>
		
		<!-- 새 글 번호와 참조글 번호는 <selectKey> 를 통회 조회한 #{product_idx} 값 사용 -->
		INSERT
		INTO product_info
		VALUES (
			#{product_idx} + 1        -- selectKey 를 통회 조회된 게시물 번호 + 1 값 사용
			, #{product_code}
			, #{product_name}
			, #{product_description}
			, #{product_category}
			, #{product_category_detail}
			, #{product_item_option}
			, #{product_price}
			, #{product_stock}
			, 1                       -- 1 : 판매중, 2: 판매 중지, 3 : 품절
			, #{product_img}
			, #{product_img2}
			, now()
		)
	</insert>
	
	<!-- 상품 상세정보 조회 -->
	<!-- 상품번호에 해당하는 레코드(게시물) 조회 -->
	<select id="selectProduct" resultType="store">
		SELECT * 
		FROM product_info
		WHERE product_idx = #{product_idx}
	</select>
	
	<!-- 상품 옵션값 가져오기 -->
	<select id="selectProductOptions" resultType="hashmap">
		SELECT product_item_option, SUBSTRING_INDEX(SUBSTRING_INDEX(product_item_option, "|", numbers.n), "|" , -1) AS splited_option
		FROM (
			SELECT 1 AS n UNION ALL
			SELECT 2 UNION ALL
			SELECT 3 UNION ALL
			SELECT 4 UNION ALL
			SELECT 5) AS numbers
		INNER JOIN product_info
		ON CHAR_LENGTH(product_item_option) - CHAR_LENGTH(REPLACE(product_item_option, "|", "")) >= numbers.n - 1
		WHERE product_idx = #{product_idx}
	</select>
	
	<!-- 상품삭제 -->
	<delete id="deleteProduct">
		DELETE
		FROM product_info
		WHERE product_idx = #{product_idx}
	</delete>
	
	<!-- 상품수정 -->
	<update id="updateProduct">
		UPDATE product_info
		SET
			product_code = #{product_code}
			, product_name = #{product_name}
			, product_description = #{product_description}
			, product_category = #{product_category}
			, product_category_detail = #{product_category_detail}
			, product_item_option = #{product_item_option}
			, product_price = #{product_price}
			, product_stock = #{product_stock}
			, product_status = #{product_status}
			<if test="!product_img.equals('')">
				, product_img = #{product_img} -- product_img 존재할 경우 UPDATE 항목 추가
			</if>
			<if test="!product_img2.equals('')">
				, product_img2 = #{product_img2} -- product_img2 존재할 경우 UPDATE 항목 추가
			</if>
		WHERE
			product_idx = #{product_idx}	
	</update>
	
	<!-- 상품이미지 삭제 -->
	<update id="deleteProductImg">
		UPDATE product_info
		SET
			product_img = CASE WHEN product_img = #{product_img} THEN '' ELSE product_img END,
			product_img2 = CASE WHEN product_img2 = #{product_img} THEN '' ELSE product_img2 END
		WHERE 
			product_idx = #{product_idx}
	</update>
	
	<!-- 전체 상품 주문내역 조회 - SELECT -->
	<!-- 검색 기능 추가를 위해 검색어에 따른 결과 게시물 수 조회 -->
	<select id="selectProcutOrderListCount" resultType="int">
		SELECT COUNT(*)
		FROM store_user
	</select>
	
	<!-- 상품 주문내역 검색, 리스트 -->
	<select id="selectProductOrderList" resultType="hashmap">
		SELECT *
		FROM store_user s
		JOIN product_info p
		ON s.product_idx = p.product_idx
		JOIN user_address u
		ON u.address_idx = s.product_address_idx
		<if test="!searchKeyword.equals('')">
			WHERE 
			<choose>
				<when test="searchType.equals('code')">
					p.product_code LIKE CONCAT('%', #{searchKeyword}, '%')
				</when>
				<when test="searchType.equals('name')">
<!-- 					board_content LIKE '%${searchKeyword}%' -->
					p.product_name LIKE CONCAT('%', #{searchKeyword}, '%')
				</when>
				<otherwise>
					1 = 1  -- WHERE 절을 포함시키되 조건을 걸고 싶지 않을 경우 활용 가능한 조건식(무조건 true 가 나오는 식이면 OK)
				</otherwise>
			</choose>
		</if>
		
		ORDER BY
			s.order_date DESC
		LIMIT
			#{startRow}     -- Mapper 내의 메서드에서 @Param("startRow") 로 지정한 파라미터명 사용
			, #{listLimit}  -- Mapper 내의 메서드에서 @Param("listLimit") 로 지정한 파라미터명 사용
	</select>
	
	<!-- 상품 주문내역 상세정보 -->
	<select id="selectProductOrderDetail" resultType="hashmap">
		SELECT s.*, u.*, p.product_idx, p.product_code, p.product_name, p.product_description,
				p.product_category, p.product_category_detail, p.product_price, p.product_status,
		        p.product_img, p.product_img2
		FROM store_user s
		JOIN product_info p
		ON s.product_idx = p.product_idx
		JOIN user_address u
		ON u.address_idx = s.product_address_idx
		WHERE s.order_idx = #{order_idx}
	</select>
	
	<!-- 상품 주문내역 배송정보 변경 -->
	<update id="updateProductOrder">
		UPDATE store_user
		SET product_shipping_info = #{product_shipping_info}
		WHERE order_idx = #{order_idx}
	</update>
	
	<!-- 상품 주문내역 값 들고오기 -->
	<select id="selectProductOrder" resultType="storeUser">
		SELECT * 
		FROM store_user
		WHERE order_idx = #{order_idx}
	</select>
	
	
	<!-- 상품 주문내역 삭제 -->
	<delete id="deleteProductOrder">
		DELETE
		FROM store_user
		WHERE order_idx = #{order_idx}
	</delete>
	
</mapper>








