<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
    
<mapper namespace="com.itwillbs.with_me.mapper.ChatMapper">
	
	<!-- 자신의 채팅방 목록 조회 -->
	<!-- 
    송신자, 수신자 2개가 테이블 상에서 1개의 컬럼(user_id)으로 2개의 레코드에 나누어져 있음
    이 때, 기본 user_id 가 sender_id 파라미터값인 레코드를 찾아 user_id 컬럼값을 sender_id 로 표기하고(AS)
    수신자 아이디는 서브쿼리를 활용해야한다!
    => 각 룸 아이디가 동일한 레코드의 user_id 값이 송신자 아이디(또는 c.user_id) 값과 다른 레코드를 찾아
       user_id 컬럼값을 receiver_id 로 표기
	-->
	<select id="selectChatRoomList" resultType="chatRoom">
		SELECT
			c.room_id
			, c.title
			, c.user_id AS sender_id
			, (
				SELECT user_id
				FROM chat_room
				WHERE
					room_id = c.room_id
					AND user_id != #{sender_id}
			) AS receiver_id
			, c.status
		FROM chat_room AS c
		WHERE 
			user_id = #{sender_id}
			AND c.status > 0 -- 채팅방 상태가 0(자신이 종료함)이 아닌 채팅방만 조회
	</select>
	
	<!-- 해당 사용자와의 기존 채팅방 정보 조회 -->
	<!--
	상대방과의 채팅방 개설 여부 확인을 위해 룸아이디, 제목, 송신자, 수신자, 채팅방상태 조회
	=> 단,
	-->
	<select id="selectChatRoom" resultType="chatRoom">
		SELECT
			c.room_id
			, c.title
			, c.user_id AS sender_id
			, c.status
			, (
				SELECT user_id
				FROM chat_room
				WHERE
					room_id = c.room_id
					AND user_id = #{receiver_id}
			) AS receiver_id
		FROM chat_room AS c
		WHERE 
			user_id = #{sender_id}
			AND title = CONCAT(#{receiver_id}, ' 님과의 대화')
			AND c.status > 0 -- 채팅방 상태가 0(자신이 종료함)이 아닌 채팅방만 조회
	</select>
	
	<!-- 새 채팅방 정보 추가 -->
	<!-- List 객체에 저장된 2개의 ChatRoom 객체를 각각 INSERT 필요 => VALUES(), () 활용 -->
	<insert id="insertChatRoom">
		INSERT INTO chat_room
		VALUES 
		<!-- 
		복수개의 항목을 한꺼번에 INSERT 할 때 마이바티스의 <foreach> 태그 활용
		=> collection 속성 : 반복할 객체 타입(list 또는 array)
		   item 속성 : collection 속성에서 지정한 객체명을 다른 이름으로 지정하여 사용 시 지정하는 이름
		   separator 속성 : 한 번 이상 반복되는 문장에서 문장들을 구별할 구분자
		   open 속성 : foreach 문 시작 전에 추가할 문자열(현재는 불필요)
		   close 속성 : foreach문 종료 후에 추가할 문자열(현재는 불필요)
		-->
		<foreach collection="list" item="chatRoomList" separator=",">   -- 정석일땐 open, close 사용 / 지금은 사용 x
			(
				#{chatRoomList.room_id}		
				,#{chatRoomList.title}		
				,#{chatRoomList.sender_id}	-- 사용자 아이디는 sender_id에 전달된 항목만 사용
				,#{chatRoomList.status}
			)	
		</foreach>
	</insert>
	
	<insert id="insertChatMessage">
		INSERT INTO chat_message
		VALUES (
			#{room_id}
			, #{sender_id}
			, #{receiver_id}
			, #{message}
			, #{type}
			, #{send_time}
		)
	</insert>
	
	<select id="selectChatMessageList" resultType="chatMessage">
		SELECT *
		FROM chat_message
		WHERE room_id = #{room_id}
	</select>
	
	<!-- 채팅 종료 표시 -->
	<!-- 전달받은 room_id가 일치하는 레코드의 staus 값 변경 -->
	<!-- user_id가 전달받은 sender_id와 동일할 경우 0, 아니면 2로 변경 -->
	<!-- SET 변경할 컬럼명 = CASE WHEN 조건식 THEN 참일때 값 ELSE 거짓일때 값 END -->
	<update id="updateChatRoomStatusForQuitRoom">
		UPDATE chat_room
		SET 
			status = CASE WHEN user_id = #{sender_id} THEN 0 ELSE 2 END
		WHERE
			room_id = #{room_id} 
	</update>
	
</mapper>























